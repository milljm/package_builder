#!/bin/bash
#############
## Specifics
##
DEP=(modules cmake gcc)
PACKAGE='llvm'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD=(http://mooseframework.org/source_packages/llvm-<LLVM>.src.tar.xz http://mooseframework.org/source_packages/cfe-<LLVM>.src.tar.xz http://mooseframework.org/source_packages/clang-tools-extra-<LLVM>.src.tar.xz http://mooseframework.org/source_packages/compiler-rt-<LLVM>.src.tar.xz http://mooseframework.org/source_packages/libcxx-<LLVM>.src.tar.xz http://mooseframework.org/source_packages/libcxxabi-<LLVM>.src.tar.xz http://mooseframework.org/source_packages/openmp-<LLVM>.src.tar.xz)
EXTRACT="false"
CONFIGURE="false"
BUILD='true'
INSTALL='true'

pre_run() {
    if [ -d $PACKAGES_DIR/llvm-<LLVM> ]; then
      rm -rf $PACKAGES_DIR/llvm-<LLVM>
      rm -f $PACKAGES_DIR/Modules/<MODULES>/adv_modules/clang
    fi

    cd $1

    # Extract/Move LLVM, Clang, Clang-Extras, compiler-rt, libcxx/abi, openmp
    # !!! NOTE: Order is important !!!
    LLVM_PACKAGES=(llvm cfe clang-tools-extra compiler-rt libcxx libcxxabi openmp)
    for LLVM_PACKAGE in ${LLVM_PACKAGES[*]}; do
      tar -xf $DOWNLOAD_DIR/$LLVM_PACKAGE-<LLVM>.src.tar.xz -C .
      if [ $? -ne 0 ]; then echo 'Failed to extract '$LLVM_PACKAGE; cleanup 1; fi
      if [ $LLVM_PACKAGE = 'cfe' ]; then
	mv $LLVM_PACKAGE-<LLVM>.src llvm/tools/clang
      elif [ $LLVM_PACKAGE = 'clang-tools-extra' ]; then
	mv $LLVM_PACKAGE-<LLVM>.src llvm/tools/clang/tools/extra
      elif [ $LLVM_PACKAGE = 'llvm' ]; then
	mv $LLVM_PACKAGE-<LLVM>.src $LLVM_PACKAGE
      else
	mv $LLVM_PACKAGE-<LLVM>.src llvm/projects/$LLVM_PACKAGE
      fi
    done

    mkdir $1/build; cd $1/build
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/<MODULES>/init/bash
    module load advanced_modules cmake
    if [ `uname` != "Darwin" ]; then
      module load gcc
      export CC=gcc; export CXX=g++
      cmake -DCMAKE_C_COMPILER=$PACKAGES_DIR/<GCC>/bin/gcc \
-DCMAKE_CXX_COMPILER=$PACKAGES_DIR/<GCC>/bin/g++ \
-DGCC_INSTALL_PREFIX=$PACKAGES_DIR/<GCC> \
-DCMAKE_CXX_LINK_FLAGS="-L$PACKAGES_DIR/<GCC>/lib64 -Wl,-rpath,$PACKAGES_DIR/<GCC>/lib64" \
-DCMAKE_INSTALL_PREFIX=$PACKAGES_DIR/llvm-<LLVM> \
-DCMAKE_INSTALL_RPATH:STRING=$PACKAGES_DIR/llvm-<LLVM>/lib \
-DLLVM_ENABLE_ASSERTIONS=ON \
-DCMAKE_BUILD_TYPE="Release" \
-DPYTHON_EXECUTABLE=`which python2.7` \
-DLLVM_TARGETS_TO_BUILD="X86" \
../llvm
    else
      cmake -DCMAKE_INSTALL_PREFIX=$PACKAGES_DIR/llvm-<LLVM> \
-DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON \
-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp \
-DPYTHON_EXECUTABLE=`which python2.7` \
-DCMAKE_BUILD_TYPE="Release" \
../llvm
    fi
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<CLANG>
#%Module1.0#####################################################################
##
## <CLANG> modulefile
##
##
##
set             BASE_PATH          $PACKAGES_DIR

module load moose/.<GCC>

if { [uname sysname] != "Darwin" } {
  if { ! [ info exists ::env(OMP_NUM_THREADS) ] } {
    setenv          OMP_NUM_THREADS               1
    # we need to be stateful somehow
    setenv          MOOSE_OMP                     True
  }
  if { [ module-info mode remove ] } {
    if { [ info exists ::env(MOOSE_OMP) ] } {
      unsetenv        OMP_NUM_THREADS
      unsetenv        MOOSE_OMP
    }
  }
  prepend-path    LD_LIBRARY_PATH               \$BASE_PATH/llvm-<LLVM>/lib
}

prepend-path    PATH                          \$BASE_PATH/llvm-<LLVM>/bin
prepend-path    LIBRARY_PATH                  \$BASE_PATH/llvm-<LLVM>/lib

# Needed for Python Clang bindings
# >>> clang.cindex.Config.set_library_path(os.getenv('MOOSE_CLANG_LIB'))
prepend-path    PYTHONPATH                    \$BASE_PATH/llvm-<LLVM>/bindings/python
setenv          MOOSE_CLANG_LIB               \$BASE_PATH/llvm-<LLVM>/lib

setenv          CC                            clang
setenv          CXX                           clang++
EOF
}

post_run() {
    cd $PACKAGES_DIR/Modules/<MODULES>/adv_modules
    if [ -f $PACKAGES_DIR/Modules/<MODULES>/adv_modules/clang ]; then
	rm -f clang
    fi
    ln -s ../modulefiles/moose/.<CLANG> clang
    if [ `uname` = "Darwin" ]; then
	# Because DYLD_LIBRARY_PATH no longer exists, we have to modify
	# rpaths in all the llvm libraries to be absolute paths
	cat <<'EOF' > $PACKAGES_DIR/llvm-<LLVM>/lib/change_links.sh
#!/bin/bash
for sfile in `ls | grep dylib`; do
  if ! [ -L $sfile ]; then
    if [ `otool -L $sfile | grep -c rpath` -ge 1 ]; then
      rpaths=($(otool -L $sfile | grep rpath | cut -f 1 -d\  ))
      echo "Changing id: `pwd`/$sfile"
      install_name_tool -id `pwd`/$sfile `pwd`/$sfile
      for link in ${rpaths[*]}; do
        echo "$link $sfile"
        if [ `echo $link | grep -c $sfile` -le 0 ]; then
          orig_link=$link
          fixed_link=$(echo $link | sed -e 's?@rpath?'`pwd`'?g')
          echo "install_name_tool -change $orig_link $fixed_link $sfile"
          install_name_tool -change $orig_link $fixed_link $sfile
        fi
      done
    fi
  fi
done
EOF
	  cd $PACKAGES_DIR/llvm-<LLVM>/lib/
	  sh change_links.sh
	  rm -f change_links.sh
	  cd /usr/local/lib
	  ln -s $PACKAGES_DIR/llvm-<LLVM>/lib/libomp.dyld .
    fi
    cp -R $1/llvm/tools/clang/bindings $PACKAGES_DIR/llvm-<LLVM>/
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
