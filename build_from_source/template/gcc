#!/bin/bash
#############
## Specifics
##
DEP=(modules automake autoconf libtool)
PACKAGE="<GCC>"
NO_CCACHE='true'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/<GCC>.tar.gz'
EXTRACT='<GCC>.tar.gz'
CONFIGURE="false"
BUILD='true'
INSTALL='true'

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/<MODULES>/init/bash"
    module load advanced_modules autotools

    #### NOTE: We no longer allow the build system to run ./contrib/download_prerequisites
    # as it is prone to failure. The gcc-x.x.x.tar.gz will now contain all the
    # neccessary pre-requisites.

    if [ `uname` = 'Darwin' ]; then
        CONFIGURE="../<GCC>/configure --prefix=$PACKAGES_DIR/<GCC> --disable-multilib --enable-languages=c,c++,fortran --enable-checking=release --enable-host-shared --with-pic --with-system-zlib --disable-nls --with-native-system-header-dir=/usr/include --with-sysroot=`xcrun --show-sdk-path`"
    else
        CONFIGURE="../<GCC>/configure --prefix=$PACKAGES_DIR/<GCC> --disable-multilib --enable-languages=c,c++,fortran --enable-checking=release --enable-host-shared --with-pic"
    fi
    mkdir ../gcc_build; cd ../gcc_build

    # I've notice by the time we make it to this module (gcc), everything else is
    # on hold because everything else is requiring gcc to be completed.
    MAX=true
}

post_run() {
    unset MAX
    if [ `uname` = "Darwin" ]; then
        GCC_TOOLCHAIN_ARCH="x86_64-apple-darwin`uname -r`"
    else
        GCC_TOOLCHAIN_ARCH="x86_64-pc-linux-gnu"
    fi
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<GCC>"
#%Module1.0#####################################################################
##
## <GCC> modulefile
##
##
##
set          BASE_PATH          "$PACKAGES_DIR"
set          GCC_PATH           "\$BASE_PATH/<GCC>"

set GCC_LIB_PATHS "\$GCC_PATH/lib64:\$GCC_PATH/lib:\$GCC_PATH/lib/gcc/${GCC_TOOLCHAIN_ARCH}/<GCC_VERSION>"

if { [uname sysname] != "Darwin" } {
  prepend-path LD_LIBRARY_PATH \$GCC_LIB_PATHS
}

prepend-path PATH                        "\$GCC_PATH/bin"
prepend-path MANPATH                     "\$GCC_PATH/share/man"

setenv       GCC_BIN                     "\$GCC_PATH/bin"
setenv       GCC_LIB                     "\$GCC_LIB_PATHS"
setenv       GCC_MAN                     "\$GCC_PATH/share/man"

EOF
    cd "$PACKAGES_DIR/Modules/<MODULES>/adv_modules"
    if [ -f gcc ]; then rm -f gcc; fi
    ln -s ../modulefiles/moose/.<GCC> gcc
    module load moose/.<GCC>
    cd "$GCC_BIN/../"
    for sfile in `find . -type f -name "*.la"`; do
        if [ `grep -c "$src_temp" $sfile` -ge 1 ]; then
            echo 'editing file: '$sfile
            perl -pi -e "s/-L.\S*build\S*[^'\s+]//g" $sfile
        fi
    done

    # We need to change an rpath for the jit compiler (only for Darwin because
    # Apple has removed the use of DYLD_LIBRARY_PATH)
    if [ `uname` = "Darwin" ]; then
        install_name_tool -id "$PACKAGES_DIR/<GCC>/lib/libgccjit.so" "$PACKAGES_DIR/<GCC>/lib/libgccjit.so"
    fi
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
