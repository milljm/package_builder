#!/bin/bash
#############
## Specifics
##
DEP=()
PACKAGE='moose_profile'
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='false'
EXTRACT='false'
CONFIGURE='false'
BUILD='false'
INSTALL='false'

pre_run() {
  return
}

post_run() {
    mkdir -p "$PACKAGES_DIR/environments"
    cat <<EOF > "$PACKAGES_DIR/environments/moose_profile"
#!/bin/bash
### Modules Source ###
if [ -n "\$MODULESHOME" ] && [ \$(echo \$MODULEPATH | grep -c <PACKAGES_DIR>) -le 0 ]; then
  export "\$MODULEPATH:<PACKAGES_DIR>/Modules/3.2.10/modulefiles"
else
  MY_SHELL=\`ps -o comm= \$\$ | sed -e 's/-//'\`
  if [ "\${MY_SHELL}" = "bash" ]; then
    source <PACKAGES_DIR>/Modules/3.2.10/init/bash
    source <PACKAGES_DIR>/Modules/3.2.10/init/bash_completion
  elif [ "\${MY_SHELL}" = "sh" ]; then
    . <PACKAGES_DIR>/Modules/3.2.10/init/sh
  fi
fi

# MOOSE_PPS_WIDTH
export MOOSE_PPS_WIDTH=180

# Source the autojump profile if requested:
if [ -n "\$MOOSE_JUMP" ]; then
  source "<PACKAGES_DIR>/environments/autojump_profile"
fi

# If, anyone wants to use our prompt:
if [ -n "\$MOOSE_PROMPT" ]; then
  PS1="\[\033[1;34m\][\u]\[\033[1;32m\][\w]\[\033[0m\]> "
fi

# Set helpful environment variables and functions
if [ \`uname -s\` == 'Darwin' ]; then
  export MOOSE_JOBS=\`/usr/sbin/sysctl -n hw.ncpu\`

  #### ICECREAM Control
  if [ -f /Library/LaunchDaemons/com.moose.icecream.plist ]; then
    function icecream() {
      if [ "\$1" = "start" ]; then
        sudo launchctl load /Library/LaunchDaemons/com.moose.icecream.plist
      elif [ "\$1" = "stop" ]; then
        sudo launchctl unload /Library/LaunchDaemons/com.moose.icecream.plist
      fi
    }
  fi
else
  export MOOSE_JOBS=\`cat /proc/cpuinfo | grep processor | wc -l\`
fi

# Load custom MOOSE command bash autocomplete rules
source "<PACKAGES_DIR>/environments/autocomplete_moose"
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
